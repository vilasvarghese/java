What is Util Package?.
		Legacy classes
		New classes
		
	What is Collection Framework?.
		It contains the collections framework, legacy collection classes, event model, date and time facilities, internationalization, and miscellaneous utility classes (a string tokenizer, a random-number generator, and a bit array).
		Following are the Important Classes in Java.util package :

			AbstractCollection: 
				This class provides a skeletal implementation of the Collection interface, to minimize the effort required to implement this interface.
			AbstractList: 
				This class provides a skeletal implementation of the List interface to minimize the effort required to implement this interface backed by a “random access” data store (such as an array).
			AbstractMap<K,V>: 
				This class provides a skeletal implementation of the Map interface, to minimize the effort required to implement this interface.
			AbstractMap.SimpleEntry<K,V>: 
				An Entry maintaining a key and a value.
			AbstractMap.SimpleImmutableEntry<K,V>: 
				An Entry maintaining an immutable key and value.
			AbstractQueue: 
				This class provides skeletal implementations of some Queue operations.
			AbstractSequentialList: 
				This class provides a skeletal implementation of the List interface to minimize the effort required to implement this interface backed by a “sequential access” data store (such as a linked list).
			AbstractSet: 
				This class provides a skeletal implementation of the Set interface to minimize the effort required to implement this interface.
			ArrayDeque: 
				Resizable-array implementation of the Deque interface.
			ArrayList: 
				Resizable-array implementation of the List interface.
			BitSet: 
				This class implements a vector of bits that grows as needed.
			Collections: 
				This class consists exclusively of static methods that operate on or return collections.
			Dictionary<K,V>: 
				The Dictionary class is the abstract parent of any class, such as Hashtable, which maps keys to values.
			EnumMap,V>: 
				A specialized Map implementation for use with enum type keys.
			EnumSet: 
				A specialized Set implementation for use with enum types.
			EventListenerProxy: 
				An abstract wrapper class for an EventListener class which associates a set of additional parameters with the listener.
			HashMap<K,V>: 
				Hash table based implementation of the Map interface.
			HashSet: 
				This class implements the Set interface, backed by a hash table (actually a HashMap instance).
			Hashtable<K,V>: 
				This class implements a hash table, which maps keys to values.
			IdentityHashMap<K,V>: 
				This class implements the Map interface with a hash table, using reference-equality in place of object-equality when comparing keys (and values).
			LinkedHashMap<K,V>: 
				Hash table and linked list implementation of the Map interface, with predictable iteration order.
			LinkedHashSet: 
				Hash table and linked list implementation of the Set interface, with predictable iteration order.
			LinkedList: 
				Doubly-linked list implementation of the List and Deque interfaces.
			ListResourceBundle: 
				ListResourceBundle is an abstract subclass of ResourceBundle that manages resources for a locale in a convenient and easy to use list.
			PriorityQueue: 
				An unbounded priority queue based on a priority heap.
			Properties: 
				The Properties class represents a persistent set of properties.
			PropertyPermission: 
				This class is for property permissions.
			PropertyResourceBundle: 
				PropertyResourceBundle is a concrete subclass of ResourceBundle that manages resources for a locale using a set of static strings from a property file.
			ResourceBundle: 
				Resource bundles contain locale-specific objects.
			ResourceBundle.Control: 
				ResourceBundle.Control defines a set of callback methods that are invoked by the ResourceBundle.getBundle factory methods during the bundle loading process.
			Stack: 
				The Stack class represents a last-in-first-out (LIFO) stack of objects.
			TreeMap<K,V>: 
				A Red-Black tree based NavigableMap implementation.
			TreeSet: 
				A NavigableSet implementation based on a TreeMap.
			UUID: 
				A class that represents an immutable universally unique identifier (UUID).
			Vector: 
				The Vector class implements a growable array of objects.
			WeakHashMap<K,V>: 
				Hash table based implementation of the Map interface, with weak keys.
	

	What is Scanner?.
		Scanner: 
			A simple text scanner which can parse primitive types and strings using regular expressions.

	What is StringTokenizer?.
		StringTokenizer: 
			The string tokenizer class allows an application to break a string into tokens.

	What is Random?.
		Random: 
			An instance of this class is used to generate a stream of pseudorandom numbers.


------------------------------------------------------------------------
	Other important classes
		Arrays: 
			This class contains various methods for manipulating arrays (such as sorting and searching).
		Calendar: 
			The Calendar class is an abstract class that provides methods for converting between a specific instant in time and a set of calendar fields such as YEAR, MONTH, DAY_OF_MONTH, HOUR, and so on, and for manipulating the calendar fields, such as getting the date of the next week.
		Date: 
			The class Date represents a specific instant in time, with millisecond precision.
		Currency: 
			Represents a currency.
		EventObject: 
			The root class from which all event state objects shall be derived.
		FormattableFlags: 
			FomattableFlags are passed to the Formattable.formatTo() method and modify the output format for Formattables.
		Formatter: 
			An interpreter for printf-style format strings.
		GregorianCalendar: 
			GregorianCalendar is a concrete subclass of Calendar and provides the standard calendar system used by most of the world.
		Locale – Set 1, Set 2: 
			A Locale object represents a specific geographical, political, or cultural region.
		Locale.Builder: 
			Builder is used to build instances of Locale from values configured by the setters.
		Objects: 
			This class consists of static utility methods for operating on objects.
		Observable: This class represents an observable object, or “data” in the model-view paradigm.
		ServiceLoader: 
			A simple service-provider loading facility.
		SimpleTimeZone: 
			SimpleTimeZone is a concrete subclass of TimeZone that represents a time zone for use with a Gregorian calendar.
		Timer: 
			A facility for threads to schedule tasks for future execution in a background thread.
		TimerTask: 
			A task that can be scheduled for one-time or repeated execution by a Timer.
		TimeZone: 
			TimeZone represents a time zone offset, and also figures out daylight savings.
